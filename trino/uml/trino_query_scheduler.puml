@startuml
title SqlQueryScheduler构造方法执行
autonumber
 -> SqlQueryScheduler: new()
participant SqlQueryScheduler.StageManager as StageManager
SqlQueryScheduler -> StageManager: create()

group 遍历执行计划分段SubPlan，每个分段执行下面内容
    StageManager -> SqlStage : createSqlStage()
    SqlStage -> SqlStage : initialize()
    StageManager <-- SqlStage : sqlStage
    StageManager -> StageManager : stages.put(stageId, stage)

    alt stage是Coordinator_only类型
        StageManager -> StageManager : coordinatorStagesInTopologicalOrder.add(stage)
    else
        StageManager -> StageManager : distributedStagesInTopologicalOrder.add(stage)
    end
end

StageManager -> StageManager : new StageManager()
note right of StageManager
    构造参数
    queryStateMachine
    stages.buildOrThrow()
    coordinatorStagesInTopologicalOrder.build(),
    distributedStagesInTopologicalOrder.build(),
    rootStageId,
    children.buildOrThrow(),
    parents.buildOrThrow()
end note
StageManager -> StageManager : initialize()
StageManager --> SqlQueryScheduler : stageManager[StageManager]

participant SqlQueryScheduler.CoordinatorStagesScheduler as CoordinatorStagesScheduler
SqlQueryScheduler -> CoordinatorStagesScheduler : create()
CoordinatorStagesScheduler -> PipelinedStageExecution : createPipelinedStageExecution()
note right of CoordinatorStagesScheduler
    遍历StageManager中的coordinatorStagesInTopologicalOrder,
    每个SqlStage创建一个PipelinedStageExecution
end note
PipelinedStageExecution -> PipelinedStageExecution : initialize()
CoordinatorStagesScheduler <-- PipelinedStageExecution : stageExecution
CoordinatorStagesScheduler -> CoordinatorStagesScheduler : initialize()

CoordinatorStagesScheduler --> SqlQueryScheduler :  coordinatorStagesScheduler
@enduml

@startuml
title 查询调度执行
autonumber
 -> SqlQueryScheduler : start()
participant SqlQueryScheduler.CoordinatorStagesScheduler as CoordinatorStagesScheduler
participant SqlQueryScheduler.FaultTolerantDistributedStagesScheduler as FaultTolerantDistributedStagesScheduler
participant SqlQueryScheduler.PipelinedDistributedStagesScheduler as PipelinedDistributedStagesScheduler
SqlQueryScheduler -> SqlQueryScheduler : createDistributedStagesScheduler()

autonumber 2.1
alt 重试策略retryPolicy为Task，retryPolicy从systemSession中获取
    SqlQueryScheduler -> FaultTolerantDistributedStagesScheduler : create()
    group  遍历StageManager中的distributedStagesInTopologicalOrder\n 每个SqlStage执行下面内容
        FaultTolerantDistributedStagesScheduler -> FaultTolerantDistributedStagesScheduler : exchange = exchangeManager.createExchange()
        FaultTolerantDistributedStagesScheduler -> FaultTolerantDistributedStagesScheduler : new FaultTolerantStageScheduler(exchange)
    end
    SqlQueryScheduler <-- FaultTolerantDistributedStagesScheduler : distributedStagesScheduler[FaultTolerantDistributedStagesScheduler]
else 重试策略retryPolicy为QUERY或者NONE
    SqlQueryScheduler -> PipelinedDistributedStagesScheduler : distributedStagesScheduler = create()
    group 遍历StageManager中的distributedStagesInTopologicalOrder\n每个SqlStage创建一个PipelinedStageExecution
        PipelinedDistributedStagesScheduler -> PipelinedStageExecution : createPipelinedStageExecution()
        PipelinedDistributedStagesScheduler <-- PipelinedStageExecution : stageExecution[PipelinedStageExecution]
    end

    group 遍历所有PipelinedStageExecution，每个StageExecution创建一个StageScheduler
        PipelinedDistributedStagesScheduler -> PipelinedDistributedStagesScheduler : createStageScheduler()
        autonumber 2.8.1
        PipelinedDistributedStagesScheduler -> SplitSourceFactory : createSplitSources()
        return splitSources[Map<PlanNodeId, SplitSource>]
        alt partitioningHandle.equals(SOURCE_DISTRIBUTION)
            PipelinedDistributedStagesScheduler -> SourcePartitionedScheduler : newSourcePartitionedSchedulerAsStageScheduler()
            SourcePartitionedScheduler -> SourcePartitionedScheduler : sourcePartitionedScheduler  =  \n new SourcePartitionedScheduler()
            SourcePartitionedScheduler --> PipelinedDistributedStagesScheduler :  scheduler[StageScheduler的匿名实现类]
            note right of PipelinedDistributedStagesScheduler
                StageScheduler匿名实现类的start()调用sourcePartitionedScheduler的start()
                StageScheduler匿名实现类的schedule()调用sourcePartitionedScheduler的schedule()
            end note
        else partitioningHandle.equals(SCALED_WRITER_DISTRIBUTION)
            PipelinedDistributedStagesScheduler --> PipelinedDistributedStagesScheduler :  scheduler[ScaledWriterScheduler]
        else splitSources不为空
            PipelinedDistributedStagesScheduler --> PipelinedDistributedStagesScheduler : scheduler[FixedSourcePartitionedScheduler]
        else
            PipelinedDistributedStagesScheduler --> PipelinedDistributedStagesScheduler :  scheduler[FixedCountScheduler]
        end
    end

    autonumber 2.9
    PipelinedDistributedStagesScheduler -> PipelinedDistributedStagesScheduler : distributedStagesScheduler = \n new PipelinedDistributedStagesScheduler()
    PipelinedDistributedStagesScheduler -> PipelinedDistributedStagesScheduler : initialize()
    SqlQueryScheduler <-- PipelinedDistributedStagesScheduler : distributedStagesScheduler[PipelinedDistributedStagesScheduler]
end


SqlQueryScheduler -> SqlQueryScheduler : distributedStagesScheduler.addStateChangeListener()
autonumber 2.12.1
alt 如果重试策略retryPolicy为QUERY  \n &&  重试次数小于最大重试次数 \n &&  errorCode为可重试错误码
    SqlQueryScheduler -> SqlQueryScheduler : scheduleRetryWithDelay(delayInMillis)
    SqlQueryScheduler -> SqlQueryScheduler : createDistributedStagesScheduler()
    SqlQueryScheduler -> SqlQueryScheduler : distributedStagesScheduler.schedule()
end

autonumber 3
SqlQueryScheduler -> CoordinatorStagesScheduler : schedule()
autonumber 3.1
CoordinatorStagesScheduler -> NodeScheduler : createNodeSelector()
NodeScheduler -> NodeScheduler : selectCurrentNode()
NodeScheduler --> CoordinatorStagesScheduler : coordinator[InternalNode]
 group 遍历所有PipelinedStageExecution，每个StageExecution创建一个RemoteTask
     CoordinatorStagesScheduler -> PipelinedStageExecution : stageExecution.scheduleTask(coordinator)
     CoordinatorStagesScheduler <-- PipelinedStageExecution : task[RemoteTask]
     CoordinatorStagesScheduler -> PipelinedStageExecution : schedulingComplete()
     CoordinatorStagesScheduler -> SqlTaskManager : addSourceTaskFailureListener(task.getTaskId(), failureReporter)
 end
 autonumber 4
SqlQueryScheduler -> SqlQueryScheduler : distributedStagesScheduler.schedule()
note right of SqlQueryScheduler
    DistributedStagesScheduler有
    FaultTolerantDistributedStagesScheduler
    和PipelinedDistributedStagesScheduler
    两个实现类
end note
@enduml


@startuml
title FaultTolerantDistributedStagesScheduler调度执行
autonumber
participant SqlQueryScheduler.FaultTolerantDistributedStagesScheduler as FaultTolerantDistributedStagesScheduler
-> FaultTolerantDistributedStagesScheduler : schedule()
group 遍历未完成的FaultTolerantStageScheduler，每个FaultTolerantStageScheduler执行下面内容
    FaultTolerantDistributedStagesScheduler ->  FaultTolerantStageScheduler : isBlocked()
    return blocked[ListenableFuture<Void>]
    alt !blocked.isDone()
        FaultTolerantDistributedStagesScheduler -> FaultTolerantDistributedStagesScheduler : blockedStages.add(blocked)
    else
        FaultTolerantDistributedStagesScheduler ->  FaultTolerantStageScheduler : schedule()
        alt sourceExchanges获取数据结束，并且taskSource为空
            FaultTolerantStageScheduler -> FaultTolerantStageScheduler : 从sourceExchanges中获取数据赋值给exchangeSources
            FaultTolerantStageScheduler -> StageTaskSourceFactory : create()
            alt partitioningHandle.equals(SINGLE_DISTRIBUTION)
                FaultTolerantStageScheduler <-- StageTaskSourceFactory : taskSource[SingleDistributionTaskSource]
            else partitioning.equals(FIXED_ARBITRARY_DISTRIBUTION) || partitioning.equals(SCALED_WRITER_DISTRIBUTION)
                FaultTolerantStageScheduler <-- StageTaskSourceFactory : taskSource[ArbitraryDistributionTaskSource]
            else partitioningHandle.equals(FIXED_HASH_DISTRIBUTION)  || partitioningHandle.getConnectorId().isPresent()
                FaultTolerantStageScheduler <-- StageTaskSourceFactory : taskSource[HashDistributionTaskSource]
            else partitioning.equals(SOURCE_DISTRIBUTION)
                FaultTolerantStageScheduler <-- StageTaskSourceFactory : taskSource[SourceDistributionTaskSource]
        end
        FaultTolerantDistributedStagesScheduler ->  FaultTolerantStageScheduler : isBlocked()
        return blocked[ListenableFuture<Void>]
        alt !blocked.isDone()
            FaultTolerantDistributedStagesScheduler -> FaultTolerantDistributedStagesScheduler : blockedStages.add(blocked)
        else
            FaultTolerantDistributedStagesScheduler -> FaultTolerantDistributedStagesScheduler : atLeastOneStageIsNotBlocked = true
        end
    end
end
alt atLeastOneStageIsNotBlocked == false
    FaultTolerantDistributedStagesScheduler -> FaultTolerantDistributedStagesScheduler : tryGetFutureValue(whenAnyComplete(blockedStages), 1, SECONDS)
end
@enduml


