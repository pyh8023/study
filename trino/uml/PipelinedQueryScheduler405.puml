@startuml
title PipelinedQueryScheduler构造方法执行

autonumber
 -> PipelinedQueryScheduler: new()
autonumber 1.1
PipelinedQueryScheduler -> StageManager: create()

autonumber 1.1.1
group 遍历执行计划分段SubPlan，每个分段执行下面内容
    StageManager -> SqlStage : createSqlStage()
    StageManager <-- SqlStage : sqlStage
    StageManager -> StageManager : stages.put(stageId, stage)
    StageManager -> StageManager : stagesInTopologicalOrder.add(stage)

    alt stage是Coordinator_only类型
        StageManager -> StageManager : coordinatorStagesInTopologicalOrder.add(stage)
    else
        StageManager -> StageManager : distributedStagesInTopologicalOrder.add(stage)
    end
end

StageManager -> StageManager : new()
note right of StageManager
    stages，stagesInTopologicalOrder，
    coordinatorStagesInTopologicalOrder，
    distributedStagesInTopologicalOrder
    作为构造参数传入
end note
StageManager -> StageManager : initialize()
autonumber 1.2
StageManager --> PipelinedQueryScheduler : stageManager[StageManager]

participant PipelinedQueryScheduler.CoordinatorStagesScheduler as CoordinatorStagesScheduler
PipelinedQueryScheduler -> CoordinatorStagesScheduler : create()
autonumber 1.2.1
CoordinatorStagesScheduler -> PipelinedStageExecution : createPipelinedStageExecution()
note right of CoordinatorStagesScheduler
    遍历StageManager中的coordinatorStagesInTopologicalOrder,
    每个SqlStage创建一个PipelinedStageExecution
end note
CoordinatorStagesScheduler <-- PipelinedStageExecution : stageExecution[PipelinedStageExecution]
CoordinatorStagesScheduler -> CoordinatorStagesScheduler : stageExecutions.add(stageExecution)
CoordinatorStagesScheduler -> CoordinatorStagesScheduler : new()
note right of CoordinatorStagesScheduler
    stageExecutions作为构造参数传入
end note
CoordinatorStagesScheduler -> CoordinatorStagesScheduler : initialize()
CoordinatorStagesScheduler --> PipelinedQueryScheduler :  coordinatorStagesScheduler
@enduml

@startuml
title 查询调度执行
autonumber
 -> PipelinedQueryScheduler : start()
autonumber 1.1
participant PipelinedQueryScheduler.CoordinatorStagesScheduler as CoordinatorStagesScheduler
participant PipelinedQueryScheduler.DistributedStagesScheduler as DistributedStagesScheduler
PipelinedQueryScheduler -> DistributedStagesScheduler : create()
autonumber 1.1.1
DistributedStagesScheduler -> PipelinedStageExecution : createPipelinedStageExecution()
note right of DistributedStagesScheduler
    遍历StageManager中的distributedStagesInTopologicalOrder,
    每个SqlStage创建一个PipelinedStageExecution
end note
DistributedStagesScheduler -> DistributedStagesScheduler : createStageScheduler()
note right of DistributedStagesScheduler
    前面创建的每个PipelinedStageExecution创建一个StageScheduler
    StageScheduler有4个实现类：
    SourcePartitionedScheduler
    ScaledWriterScheduler
    FixedCountScheduler
    FixedSourcePartitionedScheduler
end note
autonumber 1.1.2.1
DistributedStagesScheduler -> SplitSourceFactory : createSplitSources()
return splitSources[Map<PlanNodeId, SplitSource>]
alt stage为SOURCE_DISTRIBUTION类型
    DistributedStagesScheduler -> SourcePartitionedScheduler : newSourcePartitionedSchedulerAsStageScheduler()
    note right of DistributedStagesScheduler
        创建一个包装了SourcePartitionedScheduler的StageScheduler匿名实现类
    end note
else stage为SCALED_WRITER_ROUND_ROBIN_DISTRIBUTION类型
    DistributedStagesScheduler -> DistributedStagesScheduler : new ScaledWriterScheduler()
else splitSources不为空
    DistributedStagesScheduler -> DistributedStagesScheduler : new FixedCountScheduler()
else
    DistributedStagesScheduler -> DistributedStagesScheduler :  new FixedSourcePartitionedScheduler()
end

autonumber 1.1.3
DistributedStagesScheduler -> DistributedStagesScheduler : new
DistributedStagesScheduler -> DistributedStagesScheduler : initialize()
PipelinedQueryScheduler <-- DistributedStagesScheduler : distributedStagesScheduler[DistributedStagesScheduler]

autonumber 1.2
PipelinedQueryScheduler -> CoordinatorStagesScheduler : schedule()
autonumber 1.2.1
CoordinatorStagesScheduler -> NodeScheduler : createNodeSelector()
NodeScheduler -> NodeScheduler : selectCurrentNode()
NodeScheduler --> CoordinatorStagesScheduler : coordinator[InternalNode]
 group 遍历所有PipelinedStageExecution，每个StageExecution创建一个RemoteTask
     CoordinatorStagesScheduler -> PipelinedStageExecution : scheduleTask(coordinator)
     CoordinatorStagesScheduler <-- PipelinedStageExecution : task[Optional<RemoteTask>]
     CoordinatorStagesScheduler -> PipelinedStageExecution : schedulingComplete()
 end

autonumber 1.3
PipelinedQueryScheduler -> DistributedStagesScheduler : schedule()
DistributedStagesScheduler -> StageScheduler : start()
note right of DistributedStagesScheduler
1.SourcePartitionedScheduler.start()
如果开启动态过滤，则随机选择节点调用
PipelinedStageExecution.scheduleTask()
2.其他3个实现类的start() 不执行任何操作
end note
DistributedStagesScheduler -> ExecutionSchedule : getStagesToSchedule()
DistributedStagesScheduler -> PipelinedStageExecution : beginScheduling()
DistributedStagesScheduler -> StageScheduler : schedule()
autonumber 1.7.1
StageScheduler -> PipelinedStageExecution : scheduleTask()
autonumber 1.7.1.1
PipelinedStageExecution -> HttpRemoteTask : <<create>>
PipelinedStageExecution -> HttpRemoteTask : start()
autonumber 1.8
StageScheduler --> PipelinedStageExecution : result[ScheduleResult]
DistributedStagesScheduler -> PipelinedStageExecution : schedulingComplete()
@enduml
